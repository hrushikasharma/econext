import React, { useState, useEffect } from 'react';
import './Dashboard.css'; // This links to the CSS file below

// --- CarbonFootprintForm Component ---
const CarbonFootprintForm = ({ onBack, onCalculationSuccess }) => {
  const [formData, setFormData] = useState({
    drivingKmPerWeek: '',
    annualFlights: '',
    energyType: '',
    meatMealsPerWeek: '',
  });
  const [result, setResult] = useState(null);
  const handleChange = (e) => setFormData({ ...formData, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('http://localhost:8080/api/footprint/calculate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData),
        credentials: 'include',
      });
      const responseData = await response.json();
      if (!response.ok) {
        throw new Error(responseData.message || 'Something went wrong');
      }
      setResult({
        carbonFootprint: responseData.carbonFootprint.toFixed(2),
        message: 'Your result has been saved!',
      });
      if (onCalculationSuccess) onCalculationSuccess();
    } catch (error) {
      setResult({ carbonFootprint: 'Error', message: error.message });
    }
  };

  return (
    <div className="form-page-container">
      <button onClick={onBack} className="back-button">
        ‚Üê Back to Dashboard
      </button>
      <div className="form-container">
        <h2 className="form-title">Calculate Your Carbon Footprint</h2>
        <form onSubmit={handleSubmit}>
          <label className="form-label">Kilometers driven per week?</label>
          <input className="form-input" type="number" name="drivingKmPerWeek" value={formData.drivingKmPerWeek} onChange={handleChange} required />
          <label className="form-label">Flights per year?</label>
          <input className="form-input" type="number" name="annualFlights" value={formData.annualFlights} onChange={handleChange} required />
          <label className="form-label">Home energy type?</label>
          <select className="form-input" name="energyType" value={formData.energyType} onChange={handleChange} required>
            <option value="" disabled>Select</option>
            <option value="renewable">Renewable</option>
            <option value="nonRenewable">Non-renewable</option>
          </select>
          <label className="form-label">Meat-based meals per week?</label>
          <input className="form-input" type="number" name="meatMealsPerWeek" value={formData.meatMealsPerWeek} onChange={handleChange} required />
          <button type="submit" className="calculate-button">Calculate</button>
        </form>
        {result && (
          <div className={result.carbonFootprint === 'Error' ? "result-box error" : "result-box success"}>
            {result.carbonFootprint !== 'Error' && (
              <>
                <h3 className="result-title">Your Estimated Carbon Footprint:</h3>
                <p className="result-score">{result.carbonFootprint} tons CO‚ÇÇ/year</p>
              </>
            )}
            <p className="result-message">{result.message}</p>
          </div>
        )}
      </div>
    </div>
  );
};

// --- Prettified GreenTipsModal Component ---
const GreenTipsModal = ({ tips, onClose, isLoading }) => {
  const formatTips = (text) => {
    return text.split('\n').filter(line => line.trim() !== '').map((line, index) => {
      const trimmedLine = line.trim();
      if (trimmedLine.startsWith('**') && trimmedLine.endsWith('**')) {
        const headingText = trimmedLine.substring(2, trimmedLine.length - 2);
        return <h4 key={index} className="tip-heading">üçÉ {headingText}</h4>;
      }
      return <p key={index} className="tip-paragraph">{trimmedLine}</p>;
    });
  };

  return (
    <div className="tips-modal-overlay" onClick={onClose}>
      <div className="tips-modal-content" onClick={e => e.stopPropagation()}>
        <button className="tips-modal-close-button" onClick={onClose}>&times;</button>
        <h2 className="tips-modal-title">üåø Your Personalized Green Tips</h2>
        <div className="tips-modal-body">
          {isLoading ? <p>Generating your tips...</p> : formatTips(tips)}
        </div>
        <p className="ai-credit">Tips generated by AI to help you on your eco-journey.</p>
      </div>
    </div>
  );
};

// --- Main Dashboard Component ---
export default function Dashboard({ name, onLogout }) {
    const [showForm, setShowForm] = useState(false);
    const [latestLog, setLatestLog] = useState(null);
    const [showLimitMessage, setShowLimitMessage] = useState(false);
    const [showTipsModal, setShowTipsModal] = useState(false);
    const [tipsContent, setTipsContent] = useState('');
    const [isTipsLoading, setIsTipsLoading] = useState(false);

    const fetchLatestScore = async () => {
        try {
            const response = await fetch('http://localhost:8080/api/footprint/latest', { credentials: 'include' });
            if (response.ok) {
                const data = await response.json();
                if (data.latestScore) setLatestLog(data);
            }
        } catch (error) {
            console.error("Failed to fetch latest score:", error);
        }
    };

    useEffect(() => {
        fetchLatestScore();
    }, []);

    const handleNewCalculation = () => {
        fetchLatestScore();
        setShowForm(false);
    };

    const handleGetStartedClick = () => {
        if (latestLog && latestLog.logDate) {
            const lastLogDate = new Date(latestLog.logDate);
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
            if (lastLogDate > oneWeekAgo) {
                setShowLimitMessage(true);
                setTimeout(() => setShowLimitMessage(false), 4000);
                return;
            }
        }
        setShowForm(true);
    };

    const handleGreenTipsClick = async () => {
        setIsTipsLoading(true);
        setShowTipsModal(true);
        try {
            const response = await fetch('http://localhost:8080/api/footprint/tips', { credentials: 'include' });
            const data = await response.json();
            setTipsContent(response.ok ? data.tips : (data.message || 'Could not fetch tips.'));
        } catch (error) {
            setTipsContent('Failed to connect to the server.');
        }
        setIsTipsLoading(false);
    };

    if (showForm) {
        return <CarbonFootprintForm onBack={() => setShowForm(false)} onCalculationSuccess={handleNewCalculation} />;
    }

  return (
    <div className="dashboard-container">
      {showTipsModal && <GreenTipsModal tips={tipsContent} onClose={() => setShowTipsModal(false)} isLoading={isTipsLoading} />}
      {showLimitMessage && (
        <div className="limit-message-box">
            You can only calculate once a week. <br />
            Your latest score was {latestLog.latestScore.toFixed(2)} tCO‚ÇÇ/year.
        </div>
      )}
      <header className="header">
        <div className="logo-container">
            <div className="logo">üåø EcoNext</div>
            {latestLog && (
                <div className="score-display">
                    Latest Footprint: {latestLog.latestScore.toFixed(2)} tCO‚ÇÇ/year
                </div>
            )}
        </div>
        <button className="logout-button" onClick={onLogout}>
          Log Out
        </button>
      </header>
      <h1 className="welcome-message">Welcome, {name}!</h1>
      <div className="grid">
        <div className="card">
          <div className="card-icon">üë£</div>
          <h2 className="card-title">Calculate Your Footprint</h2>
          <p className="card-text">Answer a few simple questions to calculate your lifestyle's carbon footprint.</p>
          <button className="card-button" onClick={handleGetStartedClick}>Get Started</button>
        </div>
        <div className="card">
          <div className="card-icon">üåç</div>
          <h2 className="card-title">Your Eco-Score</h2>
          <p className="card-text">Check your current score and track your progress over time. Aim for a greener score!</p>
          <button className="card-button">View My Score</button>
        </div>
        <div className="card">
          <div className="card-icon">üí°</div>
          <h2 className="card-title">Green Tips</h2>
          <p className="card-text">Discover personalized tips and challenges to reduce your environmental impact.</p>
          <button className="card-button" onClick={handleGreenTipsClick}>Learn More</button>
        </div>
      </div>
    </div>
  );
}
